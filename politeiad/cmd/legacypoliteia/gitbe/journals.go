// Copyright (c) 2021 The Decred developers
// Use of this source code is governed by an ISC
// license that can be found in the LICENSE file.

package gitbe

const (
	// Journal filenames
	CommentsJournalFilename = "comments.journal"
	BallotJournalFilename   = "ballot.journal"

	// Journal actions
	JournalActionAdd     = "add"     // Add entry
	JournalActionDel     = "del"     // Delete entry
	JournalActionAddLike = "addlike" // Add comment like
)

// JournalAction prefixes and determines what the next structure is in
// the JSON journal.
//
// Version is used to determine what version of the comment journal structure
// follows.
//
// journalActionAdd -> Add entry
// journalActionDel -> Delete entry
// journalActionAddLike -> Add comment like structure (comments only)
type JournalAction struct {
	Version string `json:"version"` // Version
	Action  string `json:"action"`  // Add/Del
}

// Comment is the structure that describes the full server side content.  It
// includes server side meta-data as well. Note that the receipt is the server
// side.
//
// Signature is the client signature of the Token+ParentID+Comment.
type Comment struct {
	// Data generated by client
	Token     string `json:"token"`     // Censorship token
	ParentID  string `json:"parentid"`  // Parent comment ID
	Comment   string `json:"comment"`   // Comment
	Signature string `json:"signature"` // Client Signature
	PublicKey string `json:"publickey"` // Client public key

	// Metadata generated by decred plugin
	CommentID   string `json:"commentid"`   // Comment ID
	Receipt     string `json:"receipt"`     // Server receipt
	Timestamp   int64  `json:"timestamp"`   // Received UNIX timestamp
	TotalVotes  uint64 `json:"totalvotes"`  // Total number of up/down votes
	ResultVotes int64  `json:"resultvotes"` // Vote score
	Censored    bool   `json:"censored"`    // Has this comment been censored
}

// CensorComment is a journal entry for a censored comment. The signature and
// public key are from the admin that censored this comment.
//
// Signature is the client signature of the Token+CommentID+Reason.
type CensorComment struct {
	Token     string `json:"token"`     // Proposal censorship token
	CommentID string `json:"commentid"` // Comment ID
	Reason    string `json:"reason"`    // Reason comment was censored
	Signature string `json:"signature"` // Client signature
	PublicKey string `json:"publickey"` // Client public key

	// Generated by decredplugin
	Receipt   string `json:"receipt,omitempty"` // Server receipt
	Timestamp int64  `json:"timestamp,omitempty"`
}

// LikeComment records an up or down vote from a user on a comment.
//
// Signature is the client signature of the Token+CommentID+Action.
type LikeComment struct {
	Token     string `json:"token"`     // Censorship token
	CommentID string `json:"commentid"` // Comment ID
	Action    string `json:"action"`    // Up or downvote (1, -1)
	Signature string `json:"signature"` // Client signature
	PublicKey string `json:"publickey"` // Client public key

	// Only used on disk
	Receipt   string `json:"receipt,omitempty"`   // Server receipt
	Timestamp int64  `json:"timestamp,omitempty"` // Received UNIX timestamp
}

// CastVoteJournal represents a ballot journal entry.
type CastVoteJournal struct {
	CastVote CastVote `json:"castvote"`
	Receipt  string   `json:"receipt"` // Server receipt
}

// CastVote is a signed vote.
//
// Signature is the signature of the Token+Ticket+VoteBit.
type CastVote struct {
	Token     string `json:"token"`
	Ticket    string `json:"ticket"`
	VoteBit   string `json:"votebit"`
	Signature string `json:"signature"`
}
